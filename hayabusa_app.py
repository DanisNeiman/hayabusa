import requests
import socket
import ssl
from datetime import datetime
import os
import traceback
from colorama import Fore, Style, init
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from prompt_toolkit import prompt
from prompt_toolkit.history import FileHistory

init(autoreset=True)
console = Console()

# --- –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
class Logger:
    def __init__(self, filename):
        self.log_file = open(filename, 'w', encoding='utf-8')

    def write(self, text):
        self.log_file.write(text + "\n")

    def close(self):
        self.log_file.close()

log_filename = f"pentest_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
logger = Logger(log_filename)

def log_print(*args, **kwargs):
    text = " ".join(str(x) for x in args)
    console.print(*args, **kwargs)
    logger.write(text)

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π ---
COMMON_DIRS = [
    "admin", "login", "dashboard", "test", "backup", "tmp",
    "upload", "images", "css", "js", "api", "robots.txt", "sitemap.xml"
]

COMMON_FILES = [
    ".env", "wp-config.php", "config.php", "web.config",
    ".git/config", ".htaccess", "database.php"
]

COMMON_SUBDOMAINS = [
    "www", "mail", "ftp", "blog", "dev", "test", "portal", "api", "vpn",
    "staging", "support", "remote", "ns1", "ns2", "m", "shop", "webmail"
]

COMMON_PORTS = {
    21: "FTP",
    22: "SSH",
    23: "Telnet",
    25: "SMTP",
    53: "DNS",
    80: "HTTP",
    443: "HTTPS",
    3306: "MySQL",
    3389: "RDP",
    5432: "PostgreSQL",
    8080: "HTTP Proxy"
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ URL ---
def check_url(url):
    try:
        response = requests.get(url, timeout=5, allow_redirects=False)
        status_code = response.status_code
        if status_code == 200:
            return {"url": url, "status": status_code, "found": True}
        elif 300 <= status_code < 400:
            redirect_url = response.headers.get('Location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            return {"url": url, "status": status_code, "redirect": redirect_url}
        else:
            return {"url": url, "status": status_code}
    except Exception as e:
        return {"url": url, "error": True}

# --- –°–∫–∞–Ω–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ---
def scan_directories(base_url):
    results = []
    with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
        task = progress.add_task("[cyan]–°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...", total=len(COMMON_DIRS))
        for d in COMMON_DIRS:
            result = check_url(f"{base_url}/{d}")
            results.append(result)
            progress.update(task, advance=1)
    return results

# --- –°–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤ ---
def scan_files(base_url):
    results = []
    with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
        task = progress.add_task("[cyan]–°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã...", total=len(COMMON_FILES))
        for f in COMMON_FILES:
            result = check_url(f"{base_url}/{f}")
            results.append(result)
            progress.update(task, advance=1)
    return results

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---
def check_headers(url):
    try:
        response = requests.head(url, timeout=5)
        headers = response.headers

        security_headers = {
            "X-Content-Type-Options": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 'nosniff'",
            "X-Frame-Options": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 'DENY' –∏–ª–∏ 'SAMEORIGIN'",
            "X-XSS-Protection": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: '1; mode=block'",
            "Content-Security-Policy": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            "Strict-Transport-Security": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 'max-age=63072000'"
        }

        table = Table(title="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        table.add_column("–ó–∞–≥–æ–ª–æ–≤–æ–∫", style="cyan")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
        table.add_column("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", style="dim")

        for header, info in security_headers.items():
            value = headers.get(header)
            if value:
                table.add_row(header, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {value}", "")
            else:
                table.add_row(header, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", info)

        log_print(table)
        return dict(headers)
    except Exception as e:
        log_print(f"[red][-] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏: {e}[/red]")
        return {}

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ ---
def get_ssl_info(domain):
    try:
        context = ssl.create_default_context()
        with socket.create_connection((domain, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                cert = ssock.getpeercert()
                expires = cert.get('notAfter', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                issuer = ", ".join([f"{x[0]}={x[1]}" for x in cert.get('issuer', [])])
                log_print(Panel.fit(
                    f"[green]–ò–∑–¥–∞—Ç–µ–ª—å:[/green] {issuer}\n[green]–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ:[/green] {expires}",
                    title="SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"))
                return {"issuer": issuer, "expires": expires}
    except Exception as e:
        log_print(f"[red][-] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SSL: {e}[/red]")
        return {}

# --- –°–∫–∞–Ω–µ—Ä –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ ---
def scan_subdomains(domain):
    results = []
    with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
        task = progress.add_task("[cyan]–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–æ–º–µ–Ω—ã...", total=len(COMMON_SUBDOMAINS))
        found = False
        for sub in COMMON_SUBDOMAINS:
            full_domain = f"{sub}.{domain}"
            try:
                ip = socket.gethostbyname(full_domain)
                results.append({"domain": full_domain, "ip": ip})
                found = True
            except socket.gaierror:
                pass
            finally:
                progress.update(task, advance=1)

        if found:
            table = Table(title="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã")
            table.add_column("–ü–æ–¥–¥–æ–º–µ–Ω", style="cyan")
            table.add_column("IP", style="green")
            for r in results:
                table.add_row(r["domain"], r["ip"])
            log_print(table)
        else:
            log_print("[yellow][-] –ü–æ–¥–¥–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")

    return results

# --- –°–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤ ---
def scan_ports(domain):
    results = []
    with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
        task = progress.add_task("[cyan]–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã...", total=len(COMMON_PORTS))
        found_open = False
        for port, service in COMMON_PORTS.items():
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((domain, port))
            sock.close()
            if result == 0:
                results.append({"port": port, "service": service})
                found_open = True
            progress.update(task, advance=1)

        if found_open:
            table = Table(title="–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã")
            table.add_column("–ü–æ—Ä—Ç", style="cyan")
            table.add_column("–°–ª—É–∂–±–∞", style="green")
            for r in results:
                table.add_row(str(r["port"]), r["service"])
            log_print(table)
        else:
            log_print("[yellow][-] –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")

    return results

# --- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
def print_results(results, title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
    table = Table(title=title)
    table.add_column("URL", style="cyan")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    table.add_column("–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", style="dim")

    for r in results:
        url = r["url"]
        if r.get("found"):
            status = f"‚úÖ {r['status']}"
            extra = ""
        elif r.get("redirect"):
            status = f"üîÑ {r['status']}"
            extra = f"‚Üí {r['redirect']}"
        elif r.get("error"):
            status = "‚ùå –û—à–∏–±–∫–∞"
            extra = ""
        else:
            continue
        table.add_row(url, status, extra)

    log_print(table)

# --- –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT ---
def export_to_txt(data, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        for line in data:
            f.write(line + "\n")

# --- –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON ---
def export_to_json(data, filename):
    import json
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# --- –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML ---
def export_to_html(data, filename):
    html = """
<!DOCTYPE html>
<html lang="ru">
<head><meta charset="UTF-8"><title>PenTest Report</title></head>
<body><pre>{}</pre></body>
</html>
""".format('\n'.join(data))
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(html)

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    console.clear()
    log_print(Panel.fit("[bold cyan]üõ°Ô∏è Hayabusa Web Scanner[/bold cyan]", subtitle="by Danis Neiman"))

    target = prompt("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): ",
                    history=FileHistory(os.path.expanduser('~/.pentest_history'))).strip()

    base_url_https = f"https://{target}"
    base_url_http = f"http://{target}"

    log_print(f"\n[bold cyan]–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {target}...[/bold cyan]")

    base_url = None
    try:
        resp = requests.get(base_url_https, timeout=5)
        base_url = base_url_https
        log_print(f"[green][+] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS[/green]")
    except:
        try:
            resp = requests.get(base_url_http, timeout=5)
            base_url = base_url_http
            log_print(f"[yellow][!] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP (–±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è)[/yellow]")
        except:
            log_print(f"[red][-] –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –æ–±–æ–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º[/red]")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    log_print("\n[bold blue]üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    headers_data = check_headers(base_url)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSL
    ssl_data = {}
    if base_url.startswith("https"):
        log_print("\n[bold blue]üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ")
        ssl_data = get_ssl_info(target)

    # –ü–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    log_print("\n[bold blue]üìÅ –ü–æ–∏—Å–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    dir_results = scan_directories(base_url)
    print_results(dir_results, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
    log_print("\n[bold blue]üìÑ –ü–æ–∏—Å–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    file_results = scan_files(base_url)
    print_results(file_results, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")

    # –ü–æ–∏—Å–∫ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
    log_print("\n[bold blue]üåê –ü–æ–∏—Å–∫ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤")
    sub_results = scan_subdomains(target)

    # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
    log_print("\n[bold blue]üì° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
    port_results = scan_ports(target)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    data = {
        "target": target,
        "headers": headers_data,
        "ssl": ssl_data,
        "directories": dir_results,
        "files": file_results,
        "subdomains": sub_results,
        "ports": port_results
    }

    log_print("\n[bold green]‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.[/bold green]")
    log_print(f"[cyan]üìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {log_filename}[/cyan]")

    choice = prompt("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç? (txt/json/html/n): ").strip().lower()
    if choice in ["txt", "json", "html"]:
        export_filename = f"report_{target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{choice}"
        lines = [line.rstrip('\n') for line in logger.log_file.getvalue().split('\n')]
        
        if choice == "txt":
            export_to_txt(lines, export_filename)
        elif choice == "json":
            export_to_json(data, export_filename)
        elif choice == "html":
            export_to_html(lines, export_filename)

        log_print(f"[cyan]üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {export_filename}[/cyan]")

    logger.close()

if __name__ == "__main__":
    main()
